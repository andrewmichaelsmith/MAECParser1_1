//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.10.25 at 10:39:55 PM BST 
//


package org.mitre.maec.xmlschema.maec_core_1;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ApplicationProtocolEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ApplicationProtocolEnum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="DNS"/>
 *     &lt;enumeration value="IMAP"/>
 *     &lt;enumeration value="IRC"/>
 *     &lt;enumeration value="LDAP"/>
 *     &lt;enumeration value="HTTP"/>
 *     &lt;enumeration value="FTP"/>
 *     &lt;enumeration value="NNTP"/>
 *     &lt;enumeration value="NTP"/>
 *     &lt;enumeration value="SMTP"/>
 *     &lt;enumeration value="SOAP"/>
 *     &lt;enumeration value="SSH"/>
 *     &lt;enumeration value="Telnet"/>
 *     &lt;enumeration value="Other"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ApplicationProtocolEnum")
@XmlEnum
public enum ApplicationProtocolEnum {

    DNS("DNS"),
    IMAP("IMAP"),
    IRC("IRC"),
    LDAP("LDAP"),
    HTTP("HTTP"),
    FTP("FTP"),
    NNTP("NNTP"),
    NTP("NTP"),
    SMTP("SMTP"),
    SOAP("SOAP"),
    SSH("SSH"),
    @XmlEnumValue("Telnet")
    TELNET("Telnet"),
    @XmlEnumValue("Other")
    OTHER("Other");
    private final String value;

    ApplicationProtocolEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ApplicationProtocolEnum fromValue(String v) {
        for (ApplicationProtocolEnum c: ApplicationProtocolEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
